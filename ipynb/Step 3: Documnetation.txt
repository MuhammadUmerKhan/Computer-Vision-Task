Documentation for YOLO to VOC Conversion and File Management Code

Overview:
This Python script is responsible for converting YOLO format object detection annotations to VOC (Pascal VOC) format. Additionally, it organizes and moves annotation files and images into appropriate directories for streamlined dataset management.

Code Breakdown:

1. Imports:
- `os`: Handles file system paths and directory operations.
- `cv2`: Reads images and extracts their dimensions.
- `shutil`: Moves and copies files between directories.

2. Function Definitions:

2.1 `yolo_to_voc(yolo_bbox, img_width, img_height)`:
- Converts YOLO-format bounding box coordinates to VOC format.
- YOLO uses normalized coordinates, whereas VOC requires absolute pixel coordinates.
- Computes bounding box corners (`xmin`, `ymin`, `xmax`, `ymax`).
- Returns a tuple containing class ID and converted bounding box values.

2.2 **Main Conversion Loop**:
- Iterates through dataset splits (`train`, `test`, `val`).
- For each `.txt` annotation file:
  - Identifies corresponding image file in `.png`, `.jpg`, or `.jpeg` format.
  - Reads YOLO annotations, converts them to VOC format, and stores results.
  - Moves processed annotation files to a `txt` subdirectory for better organization.
  
2.3 `combine_files(image_dir, label_dir, combined_dir)`:
- Combines images and corresponding YOLO `.txt` labels into a single structured dataset.
- For each dataset split (`train`, `test`, `val`):
  - Ensures the presence of image and label directories.
  - Moves matching images and labels to the `combined_dir` while maintaining structure.
  - Issues warnings for missing label-image pairs.

3. Execution Flow:
- The script first converts YOLO annotations to VOC format and moves them into organized directories.
- Then, the `combine_files` function merges images and labels into a structured dataset for training.
- The script is executed via the `main()` function, which defines necessary directory paths and triggers dataset organization.

4. Folder Structure:
```
Data/
    tiny_object_detection_yolo/
        filtered_labels/
            train/
                *.txt          # YOLO annotations
            test/
                *.txt
            val/
                *.txt
        filtered_images/
            train/
                *.png          # Corresponding images
            test/
                *.png
            val/
                *.png
        Yolo__Data/            # Final combined folder
            train/
                *.png          # Merged images
                *.txt          # Merged labels
            test/
                *.png
                *.txt
            val/
                *.png
                *.txt
```

Usage:
- The script processes YOLO annotations, converts them to VOC, and organizes images and labels into a structured dataset.
- Run the script using `python script_name.py` to execute the conversion and dataset organization automatically.